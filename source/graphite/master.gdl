////////////////////////////////////////////////////////////////////////////////////////////
//
//	File: Lateef.gdl
//
//	Main Graphite code file for Lateef, including all rules.
//
////////////////////////////////////////////////////////////////////////////////////////////

/*
	This file is part of Lateef font family (http://scripts.sil.org/Lateef)
	and is Copyright (c) 2004-2017 SIL International (http://www.sil.org/),
	with Reserved Font Names "Lateef" and "SIL".

	This Font Software is licensed under the SIL Open Font License,
	Version 1.1.

	You should have received a copy of the license along with this Font Software.
	If this is not the case, go to (http://scripts.sil.org/OFL) for all the
	details including an FAQ.
*/

#include "stddef.gdh"
AutoPseudo = 0;
ScriptDirection = HORIZONTAL_RIGHT_TO_LEFT;
Bidi = true;

environment {MUnits=2048};

#ifndef opt2
#define opt(x)      [x]?
#define opt2(x)     [opt(x) x]?
#define opt3(x)     [opt2(x) x]?
#define opt4(x)     [opt3(x) x]?
#endif

// Glyph definitions and rules for codepage 1252 composites
#include "cp1252.gdl"

// Hard-coded glyph and class definitions:
#include "glyphs.gdh"

// Features
#include "features.gdh"


#define alefAttached user1

// Allow a sequence of up to 4 marks including CGJ
#define MARKS      opt4(cAnyMarksCGJ     )
#define MARKSBELOW opt4(cAnyMarksBelowCGJ)
#define MARKSABOVE opt4(cAnyMarksAboveCGJ)



table(substitution)

pass(1)	{ Direction = LEFT_TO_RIGHT } // Encoding, [de-]composition, subtending marks

	// NB: This pass also includes cp1252 compositions

	// NB: I think that even though this is an ABS decomposition, it can be done in a LTR pass because
	//     the reverser will make sure the mark always follows the base:
	cAlefPlusMark _ >  g_alef_ar:1  cAlefMark$1:1 ;
	// QUESTION: are there more things that need to be decomposed?

	// The following is a debugging tool so you can find out whether the app is rendering with Graphite or not.
	// The string "RenderingUnknown" will be rendered as "RenderingGraphite":

	codepoint("U") codepoint("n") codepoint("k") codepoint("n") codepoint("o") codepoint("w") codepoint("n") _               >
	codepoint("G") codepoint("r") codepoint("a") codepoint("p") codepoint("h") codepoint("i") codepoint("t") codepoint("e"):16  /
		codepoint("R") codepoint("e") codepoint("n") codepoint("d") codepoint("e") codepoint("r") codepoint("i") codepoint("n") codepoint("g")  _ _ _ _ _ _ _ _;

	// Subtending marks
	// This is in a LTR pass because their category (AN) and the digits that follow are collected into
	// a LTR sequence by the bidi algorithm.

	cSignTakes4 cDigitsAny cDigitsAny cDigitsAny cDigitsAny  >
		cSign4 cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium;

	cSignTakes3Medium cDigitsAny cDigitsAny cDigitsAny  >
		cSign3Medium cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium;

	cSignTakes3Small cDigitsAny cDigitsAny cDigitsAny  >
		cSign3Small cDigitsAnySmall cDigitsAnySmall cDigitsAnySmall;

	cSignTakes2 cDigitsAny cDigitsAny  >
		cSign2 cDigitsAnyMedium cDigitsAnyMedium;

	cSignTakes1 cDigitsAny  >  cSign1  cDigitsAnyMedium;

	// Pick latin variants if appropriate:
	carab > cno_arab  /  _ {directionality == 0};
	
	// Convert encoded zero-width kashida to one with advance-width.
	// NB: See master.fea ccmp feature for reasons the encoded glyph is zero width
	g_kashida_ar > g_kashida_ar_haswidth ;  


endpass; // 1

if (utr53 == on)
pass(2)  {MaxRuleLoop = 10} ;

	// Simulation of UTR53
	
	// Notes:
	// 1) We don't swap the glyphs, because that would mess up the original order,
	//    rather we delete and insert.
	// 2) glyphs for fixed-position combining classes (other than shadda and daggeralef)
	//    won't be ordered correctly relative to each other, but usually not more than one anyway.

	_  cUTR53_1_skip=S  cUTR53_1=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_1_skip)  _; // move 220 MCM to front
	_  cUTR53_2_skip=S  cUTR53_2=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_2_skip)  _; // move 230 MCM to just after 220 MCM
	_  cUTR53_3_skip=S  cUTR53_3=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_3_ctx)   _; // shadda is next
	_  cUTR53_4_skip=S  cUTR53_4=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_4_ctx)   _; // other fixed position glyphs (except daggeralef)
	_  cUTR53_5_skip=S  cUTR53_5=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_5_ctx)   _; // daggeralef
	_  cUTR53_6_skip=S  cUTR53_6=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_6_skip)  _; // other 220 in front of remaining 230.

endpass; // 2
endif;


pass(3)	// Contextual forms, lam-alef ligature

	// Lam-alef

	// Here is JK's elegant solution to contextual forms using a ligature glyph...
/***
	(absLam absLamFin)=L  absAlef=A  >
		(absLamAlef absLamAlefFin):(L A) {component {lam.ref = @L; alef.ref=@A } } gAlefPlaceholder
		/ _  MARKS  _  MARKS ^;
***/
	// ...but we're using two separate glyphs, because of all the combinations.
	cLamIso cAlefIso  >  cLamIniBeforeAlef {alefAttached = false}  cAlefFinAfterLamIni  / _ MARKS ^ _ ;
	cLamFin cAlefIso  >  cLamMedBeforeAlef {alefAttached = false}  cAlefFinAfterLamMed  / _ MARKS ^ _ ;

	// All other contextual forms

	(cDualLinkIsol cDualLinkFina g_kashida_ar g_zerowidthjoiner) (cDualLinkIsol cRightLinkIsol g_kashida_ar g_zerowidthjoiner) >
		(cDualLinkInit cDualLinkMedi g_kashida_ar g_zerowidthjoiner) (cDualLinkFina cRightLinkFina g_kashida_ar g_zerowidthjoiner)
		/ _  MARKS ^ _ ;

endpass; // 3


pass(4)	// Features, special behaviors

	cLowHamzaBase  g_hamzaabove_ar  >  cLowHamzaComposed:(1 2)  _;

	// Allah ligatures:

	// Rule 3:
	
	// alefIso-lam-lam-heh
	g_alef_ar g_lam_ar_init g_lam_ar_medi _ _ (g_heh_ar_fina g_hehgoal_ar_fina) 
		> g_alef_ar_allah g_lam_ar_allah1_init g_lam_ar_allah2_medi=L g_shadda_ar:L g_alefabove_ar:L (g_heh_ar_allah_fina g_hehgoal_ar_allah_fina) 
		/ _ MARKS _ _ _ _ _;

	// Rule 2:

	// lamInit-lam-shadda-alef-heh
	g_lam_ar_init g_lam_ar_medi (g_heh_ar_fina g_hehgoal_ar_fina) 
		> g_lam_ar_allah1_init g_lam_ar_allah2_medi (g_heh_ar_allah_fina g_hehgoal_ar_allah_fina)
		/ ^ (cRightLinkIsol cRightLinkFina) MARKS _ _ g_shadda_ar (g_alefabove_ar g_fatha_ar) _;

	// lamInit-lam-alef-shadda-heh
	g_lam_ar_init g_lam_ar_medi (g_heh_ar_fina g_hehgoal_ar_fina) 
		> g_lam_ar_allah1_init g_lam_ar_allah2_medi (g_heh_ar_allah_fina g_hehgoal_ar_allah_fina)
		/ ^ (cRightLinkIsol cRightLinkFina) MARKS _ _ (g_alefabove_ar g_fatha_ar) g_shadda_ar _;

	// lamMedi-lam-shadda-alef-heh
	g_lam_ar_medi g_lam_ar_medi (g_heh_ar_fina g_hehgoal_ar_fina) 
		> g_lam_ar_allah1_medi g_lam_ar_allah2_medi (g_heh_ar_allah_fina g_hehgoal_ar_allah_fina)
		/ ^ (cDualLinkInit cDualLinkMedi) MARKS _ _ g_shadda_ar (g_alefabove_ar g_fatha_ar) _;

	// lamMedi-lam-alef-shadda-heh
	g_lam_ar_medi g_lam_ar_medi (g_heh_ar_fina g_hehgoal_ar_fina) 
		> g_lam_ar_allah1_medi g_lam_ar_allah2_medi (g_heh_ar_allah_fina g_hehgoal_ar_allah_fina)
		/ ^ (cDualLinkInit cDualLinkMedi) MARKS _ _ (g_alefabove_ar g_fatha_ar) g_shadda_ar _;

	// Fix up initial alef for Rule 2:
	(g_alef_ar  g_alef_ar_fina)   >  (g_alef_ar_allah g_alef_ar_allah_fina)  /  _  MARKS  g_lam_ar_allah1_init;


	// Features

	if (meemAlt == sindhi)
		cMeem  >  cMeem_sindhi;
	endif;

	if (hehAlt == kurdish)
		cHeh  >  cHehKurdish;
	endif;
	if (hehAlt == sindhi)
		cHeh  >  cHehSindhi;
	endif;
	if (hehAlt == urdu)
		cHeh  >  cHehUrdu;
	endif;

	if (shaddaKasra != lowered)
		// Normally, due to UTR53 reordering shadda will preceed kasra.
		// However for sequences such as kasra+CGJ+shadda we still want to ligate the kasra and shadda
		g_shadda_ar=S  cShaddaKasraMarks=K  >  cShaddaKasraLigatures$K:(S K) _ / _ ^ MARKS _ ;
		cShaddaKasraMarks=K  g_shadda_ar=S  >  _ cShaddaKasraLigatures$K:(S K) / _ ^ MARKS _ ;
	endif;

	if (dammaAlt == filled)
		cDamma > cDamma_filled;
	endif;
//	if (dammaAlt == short)
//		cDamma > cDamma_short;
//	endif;

	if (dammatanAlt == sixNine)
		cno_sixNine > csixNine;
	endif;

	if (daggeralefAlt != small)
		g_alefabove_ar  >  g_alefabove_ar_large  /  cTakesLargeDaggerAlef  _;
	endif;

	if (sukunAlt == jasmDown)
		cno_downOpen  >  cdownOpen;
	endif;
	if (sukunAlt == jasmLeft)
		cno_leftOpen  >  cleftOpen;
	endif;

	if (endOfAyah == circle)
		cAyah  >  cAyahCircle;
	endif;
	if (endOfAyah == square)
		cAyah  >  cAyahSquare;
	endif;


	if (easternDigits == sindhi)
		cEasternDigit  >  cEasternDigitSindhi;
	endif;
	if (easternDigits == urdu)
		cEasternDigit  >  cEasternDigitUrdu;
	endif;
	if (easternDigits == rohingya)
		cEasternDigit  >  cEasternDigitRohingya;
	endif;

	if (commaAlt == down)
		cno_downward  >  cdownward;
	endif;

endpass; // 4

endtable; // sub


table (positioning)

// Must allow for at least cMark1Below and/or cMark2Below to intervene between base and marks above.
// The code below is more general.

pass(1)

	// Lam-alef components:
#define cHasExit  cTakesexitDia
#define cHasEntry cTakesentryDia
	cHasExit=L {alefAttached = true}  cHasEntry=A {attach {to=@L; at=exitS; with=entryS}; insert = true}
		/ ^ _ {alefAttached == false}  MARKS  _;


	// Marks

	// Note: the superscript-alef may have both the _alef and _diaA att pts; the ordering of these
	// rules assumes the alef AP should be used if there are no intervening marks above.
	// Sch rule: cHasAlefAP=B  cMarkSuperscriptAlefs {attach {to=@B; at=alef; with=alef_}; }  / _ ^ MARKSBELOW _ ;
	// Lateef special considerations:  In the 1.x font, only the lam (and variants except for initial)
	// were included in the superscript-alef attachment rule, even though other glyphs have an alef AP.
	// This may need further research and discussion: do we want the Graphite version to match the OT?
	// For now I am assuming so. Therefore, instead of:
	//   calefDia {attach {to = @1; at = alefS; with = alefM}} / cTakesalefDia MARKSBELOW _;
	// we'll use:
	calefDia {attach {to = @1; at = alefS; with = alefM}} /
		( cLamIso cLamIni cLamIniBeforeAlef cLamMed cLamMedBeforeAlef cLamFin) MARKSBELOW _;

	cdiaADia {attach {to = @1; at = diaAS; with = diaAM}} / cTakesdiaADia MARKSBELOW _;
	cdiaBDia {attach {to = @1; at = diaBS; with = diaBM}} / cTakesdiaBDia opt4(cnTakesdiaBDia) _;

	// Subtending marks
	// NB: at this point digits should be in visual order, right to left,
	// so we attach the left-most (logically first) to the sign, and proceed to the right.


	cSignDigit=D4 { attach {to=@D3; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D3 { attach {to=@D2; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSign4=S;

	cSignDigit=D3 { attach {to=@D2; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSign3=S;

	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSign2=S;

	cSignDigit { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSign1=S;


	// However, there is a bug in some integrations (e.g., Firefox)
	// such that the glyps are still in logical order:

	cSign4=S
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D3 { attach {to=@D2; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D4 { attach {to=@D3; at=digitRS; with=digitLS }; insert = true};

	cSign3=S
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D3 { attach {to=@D2; at=digitRS; with=digitLS }; insert = true};


	cSign2=S
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true};


	cSign1=S
	cSignDigit { attach {to=@S;  at=digitRS; with=digitLS }; insert = true};


endpass; // 1

pass(2)

	// Kerning of reh-like and waw-like

	// Loosen from certain narrow initials because of nuktas below
	// NB: not sure if it is an optical illusion or what, but if I
	// kern Reh & Waw the same distance, the Rehs seem to still touch.
	// So I'm giving them an extra 50m
	cKernRehWawLoosen     {advance.x += 200m } / cRehAll MARKS _ ;
	cKernRehWawLoosen     {advance.x += 150m } / cWawAll MARKS _ ;
	cKernRehWawLoosenMore {advance.x += 350m } / cRehAll MARKS _ ;
	cKernRehWawLoosenMore {advance.x += 300m } / cWawAll MARKS _ ;

	// loosen from following alef with mark below it
	cAlefIso {advance.x += 150m} / cRehWawAll MARKS _ MARKS cAnyMarksBelow ;
	// otherwise most can tighten to alef
	cRehKernAlef {advance.x -= 130m} / (cRehWawTighten cRehWawTightenMore) MARKSBELOW _ ;

	// tighten to following gaf-like unless reh/waw have a mark above
	cKernRehWawGaf {advance.x -= 150m} / cRehWawTightenToGaf MARKSBELOW _ ;

	// tighter against Ain-like initials
	// (for other fonts we don't do this if the Ain has marks Below, but Lateef design is different.)
	// cAinLikeInit                     / (cRehWawTighten cRehWawTightenMore) MARKS _ MARKS cAnyMarksBelow ;
	cAinLikeInit {advance.x -= 150m} / cRehWawTighten     MARKS _ ;
	cAinLikeInit {advance.x -= 150m} / cRehWawTightenMore MARKS _ ;

	// loosen from following Ain-like isloates when reh/wah have lower diacritic:
	cAinLikeIsol {advance.x += 200m} / cRehWawAll MARKS cAnyMarksBelow MARKS _ ;

	// otherwise tighten some reh/wah (nothing below) to following Ain-like isolates
	cAinLikeIsol {advance.x -= 200m} / cRehWawNothingBelow MARKSABOVE _ ;

	// loosen from following narrow glyphs with something below
	cNarrowIni {advance.x += 120m} / cRehWawAll MARKS _ MARKS cAnyMarksBelow ;

	// leave certain cases alone:
	cRehKernOther   / (cRehWawTighten cRehWawTightenMore) MARKS _ MARKS cAnyMarksBelow ;
	(cRehKernOther cRehKernOtherMB)  / (g_jeh_ar_fina  g_reh_hamzaabove_ar_fina g_reh_twodotshorizontalabove_tahabove_ar g_reh_twodotshorizontalabove_tahabove_ar_fina g_zain_vinvertedabove_ar_fina) MARKS _ ;

	// otherwise tighten against most things
	(cRehKernOther cRehKernOtherMB) {advance.x -= 130m} / (cRehWawTighten cRehWawTightenMore) MARKSBELOW _ ;



endpass; // 2



endtable; // pos

endenvironment;
