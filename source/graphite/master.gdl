////////////////////////////////////////////////////////////////////////////////////////////
//
//	File: Lateef.gdl
//
//	Main Graphite code file for Lateef, including all rules.
//
////////////////////////////////////////////////////////////////////////////////////////////

/*
	This file is part of Lateef font family (http://scripts.sil.org/Lateef)
	and is Copyright (c) 2017-2022 SIL International (http://www.sil.org/),
	with Reserved Font Names "Lateef" and "SIL".

	This Font Software is licensed under the SIL Open Font License,
	Version 1.1.

	You should have received a copy of the license along with this Font Software.
	If this is not the case, go to (http://scripts.sil.org/OFL) for all the
	details including an FAQ.
*/

#include "stddef.gdh"
AutoPseudo = 0;
ScriptDirection = HORIZONTAL_RIGHT_TO_LEFT;
Bidi = true;

environment {MUnits=2048};

#ifndef opt2
#define opt(x)      [x]?
#define opt2(x)     [opt(x) x]?
#define opt3(x)     [opt2(x) x]?
#define opt4(x)     [opt3(x) x]?
#endif

// Glyph definitions and rules for codepage 1252 composites
#include "cp1252.gdl"

// Hard-coded glyph and class definitions:
#include "glyphs.gdh"

// Features
#include "features.gdh"


// Allow a sequence of up to 4 marks including CGJ
#define MARKS      opt4(cAnyMarksCGJ     )
#define MARKSBELOW opt4(cAnyMarksBelowCGJ)
#define MARKSABOVE opt4(cAnyMarksAboveCGJ)


table(substitution)

pass(1)	{ Direction = LEFT_TO_RIGHT } // Encoding, [de-]composition, subtending marks

	// NB: This pass also includes cp1252 compositions

	// NB: I think that even though this is an ABS decomposition, it can be done in a LTR pass because
	//     the reverser will make sure the mark always follows the base:
	cAlefPlusMark _ >  g_alef_ar:1  cAlefMark$1:1 ;
	// QUESTION: are there more things that need to be decomposed?

	// The following is a debugging tool so you can find out whether the app is rendering with Graphite or not.
	// The string "RenderingUnknown" will be rendered as "RenderingGraphite":

	codepoint("U") codepoint("n") codepoint("k") codepoint("n") codepoint("o") codepoint("w") codepoint("n") _               >
	codepoint("G") codepoint("r") codepoint("a") codepoint("p") codepoint("h") codepoint("i") codepoint("t") codepoint("e"):16  /
		codepoint("R") codepoint("e") codepoint("n") codepoint("d") codepoint("e") codepoint("r") codepoint("i") codepoint("n") codepoint("g")  _ _ _ _ _ _ _ _;

	// Subtending marks
	// This is in a LTR pass because their category (AN) and the digits that follow are collected into
	// a LTR sequence by the bidi algorithm.

	cSignTakes4 cDigitsAny cDigitsAny cDigitsAny cDigitsAny  >
		cSign4 cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium;

	cSignTakes3Medium cDigitsAny cDigitsAny cDigitsAny  >
		cSign3Medium cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium;

	cSignTakes3Small cDigitsAny cDigitsAny cDigitsAny  >
		cSign3Small cDigitsAnySmall cDigitsAnySmall cDigitsAnySmall;

	cSignTakes2 cDigitsAny cDigitsAny  >
		cSign2 cDigitsAnyMedium cDigitsAnyMedium;

	cSignTakes1 cDigitsAny  >  cSign1  cDigitsAnyMedium;

	// Pick latin variants if appropriate:
	cno_latn > clatn  /  _ {directionality == 0};

endpass; // 1

if (utr53 == on)
pass(2)  {MaxRuleLoop = 10} ;

	// Simulation of UTR53
	
	// Notes:
	// 1) We don't swap the glyphs, because that would mess up the original order,
	//    rather we delete and insert.
	// 2) glyphs for fixed-position combining classes (other than shadda and daggeralef)
	//    won't be ordered correctly relative to each other, but usually not more than one anyway.

	_  cUTR53_1_skip=S  cUTR53_1=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_1_skip)  _; // move 220 MCM to front
	_  cUTR53_2_skip=S  cUTR53_2=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_2_skip)  _; // move 230 MCM to just after 220 MCM
	_  cUTR53_3_skip=S  cUTR53_3=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_3_ctx)   _; // shadda is next
	_  cUTR53_4_skip=S  cUTR53_4=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_4_ctx)   _; // other fixed position glyphs (except daggeralef)
	_  cUTR53_5_skip=S  cUTR53_5=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_5_ctx)   _; // daggeralef
	_  cUTR53_6_skip=S  cUTR53_6=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_6_skip)  _; // other 220 in front of remaining 230.

endpass; // 2
endif;


pass(3)	// Contextual forms, lam-alef ligature

	// Lam-alef

	// Here is JK's elegant solution to contextual forms using a ligature glyph...
/***
	(absLam absLamFin)=L  absAlef=A  >
		(absLamAlef absLamAlefFin):(L A) {component {lam.ref = @L; alef.ref=@A } } gAlefPlaceholder
		/ _  MARKS  _  MARKS ^;
***/
	
	cLamIsolFina  g_alef_ar                 >  cLamAlefLig            g_alefPlaceholder  /  _=L MARKS  _=A  MARKS ^;
	cLamIsolFina  g_alef_wasla_ar           >  cLamAlefWaslaLig       g_alefPlaceholder  /  _=L MARKS  _=A  MARKS ^;
	cLamIsolFina  g_alef_wavyhamzaabove_ar  >  cLamAlefWavyHAboveLig  g_alefPlaceholder  /  _=L MARKS  _=A  MARKS ^;
	cLamIsolFina  g_alef_wavyhamzabelow_ar  >  cLamAlefWavyHBelowLig  g_alefPlaceholder  /  _=L MARKS  _=A  MARKS ^;
	cLamIsolFina  g_alef_twoabove_ar        >  cLamAlefTwoAboveLig    g_alefPlaceholder  /  _=L MARKS  _=A  MARKS ^;
	cLamIsolFina  g_alef_threeabove_ar      >  cLamAlefThreeAboveLig  g_alefPlaceholder  /  _=L MARKS  _=A  MARKS ^;

	
	
	// All other contextual forms

	(cDualLinkIsol cDualLinkFina g_kashida_ar g_zerowidthjoiner) (cDualLinkIsol cRightLinkIsol g_kashida_ar g_zerowidthjoiner) >
		(cDualLinkInit cDualLinkMedi g_kashida_ar g_zerowidthjoiner) (cDualLinkFina cRightLinkFina g_kashida_ar g_zerowidthjoiner)
		/ _  MARKS ^ _ ;

endpass; // 3


pass(4)	// Features, special behaviors

	cLowHamzaBase  g_hamzaabove_ar  >  cLowHamzaComposed:(1 2)  _;
	
	// Allah ligatures:
	// Also see pass 5 below.

	// Rule 3: isolate alef present, no shadda
	
	// alefIso-lam-lam-heh
	cAlefNoAllahIsol  g_lam_ar_init  g_lam_ar_medi  _  _  cHehNoAllah 
		>  cAlefAllahIsol  g_lam_ar_init_allah1  g_lam_ar_medi_allah2=L  g_shadda_ar:L  g_alefabove_ar:L  cHehAllah 
		/  _ MARKS _ g_kasra_ar? _ _ _ _;

	// Rule 2:

	// lam-lam-shadda-dalef-heh
	cLam1NoAllah  g_lam_ar_medi  cHehNoAllah
		>  cLam1Allah  g_lam_ar_medi_allah2  cHehAllah
		/  _  g_kasra_ar?  _  g_shadda_ar (g_alefabove_ar g_fatha_ar) _;

	// lam-lam-dalef-shadda-heh
	cLam1NoAllah  g_lam_ar_medi  cHehNoAllah
		>  cLam1Allah  g_lam_ar_medi_allah2  cHehAllah
		/  _  g_kasra_ar?   _ (g_alefabove_ar g_fatha_ar) g_shadda_ar _;

	// lam-lam-shadda-heh
	cLam1NoAllah  g_lam_ar_medi  _ cHehNoAllah
		>  cLam1Allah  g_lam_ar_medi_allah2  g_alefabove_ar:S  cHehAllah
		/  _ g_kasra_ar?  _ g_shadda_ar=S _=DA _;


	// Features

	if (meemAlt == sindhi)
		cno_sindhi  >  csindhi;
	endif;

	if (hehAlt == kurdish)
		cHeh  >  cHehKurdish;
	endif;
	if (hehAlt == sindhi)
		cHeh  >  cHehSindhi;
	endif;
	if (hehAlt == urdu)
		cHeh  >  cHehUrdu;
	endif;

	if (KyrgyzOeAlt == bar)
		cno_bar  >  cbar;
	endif;

	if (yehHamzaAlt == Kyrgyz)
		cno_loclKIR  >  cloclKIR;
	endif;

	if (shaddaKasra != lowered)
		// Normally, due to UTR53 reordering shadda will preceed kasra.
		// However for sequences such as kasra+CGJ+shadda we still want to ligate the kasra and shadda
		g_shadda_ar=S  cShaddaKasraMarks=K  >  cShaddaKasraLigatures$K:(S K) _ / _ ^ MARKS _ ;
		cShaddaKasraMarks=K  g_shadda_ar=S  >  _ cShaddaKasraLigatures$K:(S K) / _ ^ MARKS _ ;
	endif;

	if (dammaAlt == filled)
		cno_filled > cfilled;
	endif;

	if (dammatanAlt == sixNine)
		cno_sixNine > csixNine;
	endif;

	if (daggeralefAlt != small)
		g_alefabove_ar  >  g_alefabove_ar_large  /  cTakesLargeDaggerAlef  _;
	endif;

	if (sukunAlt == jasmDown)
		cno_downOpen  >  cdownOpen;
	endif;
	if (sukunAlt == jasmLeft)
		cno_leftOpen  >  cleftOpen;
	endif;

	if (endOfAyah == circle)
		cAyah  >  cAyahCircle;
	endif;
	if (endOfAyah == square)
		cAyah  >  cAyahSquare;
	endif;


	if (easternDigits == sindhi)
		cEasternDigit  >  cEasternDigitSindhi;
	endif;
	if (easternDigits == urdu)
		cEasternDigit  >  cEasternDigitUrdu;
	endif;
	if (easternDigits == rohingya)
		cEasternDigit  >  cEasternDigitRohingya;
	endif;

	if (commaAlt == down)
		cno_downward  >  cdownward;
	endif;

	if (decimalSepAlt == slash)
	  g_decimalseparator_ar  >  g_decimalseparator_ar_slash;
	endif;

endpass; // 4

pass(5)

	// Allah clean-up: use appropriate form of alef.
	cAlefNoAllah  >  cAlefAllah  /  _  MARKS  g_lam_ar_init_allah1;

endpass;  // 5

endtable; // sub


table (positioning)

// Must allow for at least cMark1Below and/or cMark2Below to intervene between base and marks above.
// The code below is more general.

pass(1)

	// Marks

	// For lam-alef ligatures, the g_alefPlaceHolder glyph distinguishes between marks that go on the
	// lam side (using diaA_1, diaB_1) and those on the alef side (diaA_2, diaB_2).

	// Rules for ligature attachment. These are derived from Sch but simplified:

	cdiaADia {attach {to = @1; at = diaA_1S; with = diaAM}} / cTakesdiaA_1Dia opt4(cndiaADia) _;
	cdiaADia {attach {to = @1; at = diaA_2S; with = diaAM}} / cTakesdiaA_2Dia MARKS g_alefPlaceholder opt4(cndiaADia) _;
	cdiaBDia {attach {to = @1; at = diaB_1S; with = diaBM}} / cTakesdiaB_1Dia opt4(cndiaBDia) _;
	cdiaBDia {attach {to = @1; at = diaB_2S; with = diaBM}} / cTakesdiaB_2Dia MARKS g_alefPlaceholder opt4(cndiaBDia) _;

	// Rules for mark-to-base

	// Note: the superscript-alef may have both the _alef and _diaA att pts; the ordering of these
	// rules assumes the alef AP should be used if there are no intervening marks above.
	// Sch rule: calefDia {attach {to = @1; at = alefS; with = alefM}} / ...;
	// Lateef special considerations:  In the 1.x font, only the lam (and variants except for initial)
	// were included in the superscript-alef attachment rule, *even though* other glyphs have an alef AP.
	// We managed this by using a manually maintained class, cHasAlefAP, to specify what base chars participated
	// in the special logic. While this is possible VOLT, it isn't possible in fea.
	// In order to match the old Lateef behavior, we have renamed the `alef` anchors to `alefUnused` on 
	// all base glyphs *other than* the lam glyphs where we want it. This preserves the anchor data but
	// makes the alef positioning possible in fea:
	
	calefDia {attach {to = @1; at = alefS; with = alefM}} / cTakesalefDia MARKSBELOW _;
	cdiaADia {attach {to = @1; at = diaAS; with = diaAM}} / cTakesdiaADia MARKSBELOW _;
	cdiaBDia {attach {to = @1; at = diaBS; with = diaBM}} / cTakesdiaBDia opt4(cnTakesdiaBDia) _;

	// Subtending marks
	// NB: at this point digits should be in visual order, right to left,
	// so we attach the left-most (logically first) to the sign, and proceed to the right.

	cSignDigit=D4 { attach {to=@D3; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D3 { attach {to=@D2; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSign4=S;

	cSignDigit=D3 { attach {to=@D2; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSign3=S;

	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSign2=S;

	cSignDigit { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSign1=S;


	// However, there is a bug in some integrations (e.g., Firefox)
	// such that the glyps are still in logical order:

	cSign4=S
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D3 { attach {to=@D2; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D4 { attach {to=@D3; at=digitRS; with=digitLS }; insert = true};

	cSign3=S
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D3 { attach {to=@D2; at=digitRS; with=digitLS }; insert = true};


	cSign2=S
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true};


	cSign1=S
	cSignDigit { attach {to=@S;  at=digitRS; with=digitLS }; insert = true};


endpass; // 1

// pass(2)
// 
// 	// Kerning of reh-like and waw-like
// 
// 	// Loosen from certain narrow initials because of nuktas below
// 	// NB: not sure if it is an optical illusion or what, but if I
// 	// kern Reh & Waw the same distance, the Rehs seem to still touch.
// 	// So I'm giving them an extra 50m
// 	cKernRehWawLoosen     {advance.x += 200m } / cRehAll MARKS _ ;
// 	cKernRehWawLoosen     {advance.x += 150m } / cWawAll MARKS _ ;
// 	cKernRehWawLoosenMore {advance.x += 350m } / cRehAll MARKS _ ;
// 	cKernRehWawLoosenMore {advance.x += 300m } / cWawAll MARKS _ ;
// 
// 	// loosen from following alef with mark below it
// 	cAlefIso {advance.x += 150m} / cRehWawAll MARKS _ MARKS cAnyMarksBelow ;
// 	// otherwise most can tighten to alef
// 	cRehKernAlef {advance.x -= 130m} / (cRehWawTighten cRehWawTightenMore) MARKSBELOW _ ;
// 
// 	// tighten to following gaf-like unless reh/waw have a mark above
// 	cKernRehWawGaf {advance.x -= 150m} / cRehWawTightenToGaf MARKSBELOW _ ;
// 
// 	// tighter against Ain-like initials
// 	// (for other fonts we don't do this if the Ain has marks Below, but Lateef design is different.)
// 	// cAinLikeInit                     / (cRehWawTighten cRehWawTightenMore) MARKS _ MARKS cAnyMarksBelow ;
// 	cAinLikeInit {advance.x -= 150m} / cRehWawTighten     MARKS _ ;
// 	cAinLikeInit {advance.x -= 150m} / cRehWawTightenMore MARKS _ ;
// 
// 	// loosen from following Ain-like isloates when reh/wah have lower diacritic:
// 	cAinLikeIsol {advance.x += 200m} / cRehWawAll MARKS cAnyMarksBelow MARKS _ ;
// 
// 	// otherwise tighten some reh/wah (nothing below) to following Ain-like isolates
// 	cAinLikeIsol {advance.x -= 200m} / cRehWawNothingBelow MARKSABOVE _ ;
// 
// 	// loosen from following narrow glyphs with something below
// 	cNarrowIni {advance.x += 120m} / cRehWawAll MARKS _ MARKS cAnyMarksBelow ;
// 
// 	// leave certain cases alone:
// 	cRehKernOther   / (cRehWawTighten cRehWawTightenMore) MARKS _ MARKS cAnyMarksBelow ;
// 	(cRehKernOther cRehKernOtherMB)  / (g_jeh_ar_fina  g_reh_hamzaabove_ar_fina g_reh_twodotshorizontalabove_tahabove_ar g_reh_twodotshorizontalabove_tahabove_ar_fina g_zain_vinvertedabove_ar_fina) MARKS _ ;
// 
// 	// otherwise tighten against most things
// 	(cRehKernOther cRehKernOtherMB) {advance.x -= 130m} / (cRehWawTighten cRehWawTightenMore) MARKSBELOW _ ;
// 
// 
// 
// endpass; // 2



endtable; // pos

// Collision-Avoidance-based kerning

#include "caBasedKerning.gdl"

endenvironment;
