////////////////////////////////////////////////////////////////////////////////////////////
//
//	File: Lateef.gdl
//
//	Main Graphite code file for Lateef, including all rules.
//
////////////////////////////////////////////////////////////////////////////////////////////

/*
	This file is part of Lateef font family (http://scripts.sil.org/Lateef) 
	and is Copyright (c) 2004-2017 SIL International (http://www.sil.org/),
	with Reserved Font Names "Lateef" and "SIL".

	This Font Software is licensed under the SIL Open Font License,
	Version 1.1.

	You should have received a copy of the license along with this Font Software.
	If this is not the case, go to (http://scripts.sil.org/OFL) for all the
	details including an FAQ.
*/

#include "stddef.gdh"
AutoPseudo = 0;
ScriptDirection = HORIZONTAL_RIGHT_TO_LEFT;
Bidi = true;

environment {MUnits=2048};


#if 0   // DESIGN NOTES  -- taken verbatim from Scheherazade project -- not all are appropriate for Lateef

One of the complex issues is mark attachment. Problems stem from the following issues:

1) Do we require marks to be in a particular order?
	The typical sequence of marks is shadda or hamza, followed by vowel, followed by quranic mark.
	Windows Arabic uses this order, but a canonical Unicode string will not always be in this order.
	Further, non-canonical Unicode strings can have the marks in any order.
	Decision: We need to support any order.

2) Do we visually identify illogical mark sequences?
	While the order of the marks on a given base is variable, certain marks should not occur
	simultaneously. For example, no more than one vowel mark should occur. If two vowels occur on 
	the same base, we can visually identify this error by inserting a dotted circle between them
	which will then act as a base for the second vowel.
	But detecting this if we allow any order vowels (see 1) is a bit tricky. 
	Decision: We want to provide this valuable feedback. 

3) Exactly what marks are mutually exclusive? Seems clear that the vowels (e.g kasra, fatha, damma,
	kasratan, fathatan, dammatan, sukun) are mutually exclusive with each other. For Arabic
	shadda, hamza above, hamza below, and maddah are also mutually exclusive, but I don't know about
	other languages. I also don't know about the remaining (i.e., quranic) marks.
	Decision: assume shadda, hamza a/b, maddah and mark noon ghunna are mutually exclusive, and vowel
	marks are mutually exclusive.
	
4) However, maddah works differently from shadda and hamza
	in that it is placed above the vowel rather than below. (For example, superscript alef + maddah)

To accomplish all this, the design we use is to reorder the marks to a logical
order based on 4 classes:
	cMark1 class contains shadda, hamza, mark noon ghunna
	cMark2 class contains the vowels
	cMark3 class contains maddah
	cMark4 class contains quranic marks and Rohingya tones
	
Only cMark2 and cMark4 can have duplicates. Except right now there are no outer attachment points for the
quranic marks, so multiples don't work right.


#endif

#ifndef opt2
#define opt(x)      [x]?
#define opt2(x)     [opt(x) x]?
#define opt3(x)     [opt2(x) x]?
#define opt4(x)     [opt3(x) x]?
#endif

// Glyph definitions and rules for codepage 1252 composites
#include "cp1252.gdl"


// Features 
#include "features.gdh"


#define alefAttached user1

// Now add additional classes we need:

table(glyph)

cMarkSuperscriptAlefs = ( cMarkGroup2A ) ;

cMarksAbove = (  cMarkGroup1A cMarkGroup2A cMarkGroup3A cMarkGroup4A cMarkGroup5A ) ;
cMarksBelow = ( cMarkGroup1B cMarkGroup2B  cMarkGroup3B ) ;
cMarksAny = ( cMarksAbove cMarksBelow ) ;

cMarkOrder1 = ( cMarkGroup1A cMarkGroup1B ) ;				// hamza & noon ghunna marks go first
cMarkOrder2 = ( cMarkGroup2A cMarkGroup3A cMarkGroup2B ) ;	// vowels go next
cMarkOrder3 = ( cMarkGroup4A ) ;							// maddah 
cMarkOrder4 = ( cMarkGroup5A cMarkGroup3B ) ;				// everything else last
cMarkOrder234 = ( cMarkOrder2 cMarkOrder3 cMarkOrder4 );
cMarkOrder34  = (             cMarkOrder3 cMarkOrder4 );


endtable;


// Allow a sequence of up to 4 marks.
#define MARKS [ cMarksAny [ cMarksAny [ cMarksAny cMarksAny? ]? ]? ]?

#define MARKSBELOW [ cMarksBelow [ cMarksBelow cMarksBelow? ]? ]?

#define MARKSABOVE [ cMarksAbove [ cMarksAbove cMarksAbove? ]? ]?


table(substitution)

pass(1)	{ Direction = LEFT_TO_RIGHT } // Encoding, [de-]composition, mirroring, subtending marks

	// NB: This pass also includes cp1252 compositions
	
	// NB: I think that even though this is an ABS decomposition, it can be done in a LTR pass because
	//     the reverser will make sure the mark always follows the base:
	cAlefPlusMark _ >  absAlef:1  cAlefMark$1:1 ;
	// QUESTION: are there more things that need to be decomposed?
		
//	if (graphite1mirror)	// No longer support Graphite 1 mirroring?
//		(cMirrorOpen cMirrorClose)  >  (cMirrorClose cMirrorOpen);
//	endif;

	// The following is a debugging tool so you can find out whether the app is rendering with Graphite or not.
	// The string "RenderingUnknown" will be rendered as "RenderingGraphite":

	codepoint("U") codepoint("n") codepoint("k") codepoint("n") codepoint("o") codepoint("w") codepoint("n") _               > 
	codepoint("G") codepoint("r") codepoint("a") codepoint("p") codepoint("h") codepoint("i") codepoint("t") codepoint("e"):16  / 
		codepoint("R") codepoint("e") codepoint("n") codepoint("d") codepoint("e") codepoint("r") codepoint("i") codepoint("n") codepoint("g")  _ _ _ _ _ _ _ _;

	// Subtending marks
	// This is in a LTR pass because their category (AN) and the digits that follow are collected into
	// a LTR sequence by the bidi algorithm.
	
//	cSignTakes4 cDigitsAny cDigitsAny cDigitsAny cDigitsAny  >
//		cSign4 cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium;

//	cSignTakes3Medium cDigitsAny cDigitsAny cDigitsAny  >
//		cSign3Medium cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium;
		
	cSignTakes3Small cDigitsAny cDigitsAny cDigitsAny  >
		cSign3Small cDigitsAnySmall cDigitsAnySmall cDigitsAnySmall;
		
	cSignTakes2 cDigitsAny cDigitsAny  >
		cSign2 cDigitsAnyMedium cDigitsAnyMedium;

	cSignTakes1 cDigitsAny  >  cSign1  cDigitsAnyMedium;

	// Pick latin variants if appropriate:
	carab > cno_arab  /  _ {directionality == 0};

endpass; // 1


pass(2)	// Reorder marks to "logical" order (this allows for canonical order input,
	// as Unicode got the canonical order wrong!)	
				
	// NB: Only cMark2 (vowel marks) and cMark4 (quranic marks) can have multiples.
	// The rules below allow for up to 3 vowel marks and up to 3 quranic marks,
	// with a total of 4 marks.
	
	// We don't swap the glyphs, because that would mess up the original order,
	// rather we delete and insert.
	
	_  cMarkOrder1  >  @e:e  _  / _  ^  cMarkOrder234 [ cMarkOrder234 cMarkOrder234? ]?  _=e;
	_  cMarkOrder2  >  @e:e  _  / _  ^  cMarkOrder34  [ cMarkOrder34  cMarkOrder34?  ]?  _=e;
	_  cMarkOrder3  >  @e:e  _  / _  ^  cMarkOrder4   [ cMarkOrder4   cMarkOrder4?   ]?  _=e;
	
	// Note: Jonathan says inserting circles is a bad idea for minority language support.

endpass; // 2

pass(3)	// ligature diacritics

	if (shaddaKasra == std)
		absShadda  cShaddaKasraMarks  >  _  cShaddaKasraLigatures:(1 2);
	endif;

endpass; // 3


pass(4)	// Contextual forms, lam-alef ligature

	// Lam-alef
	
	// Here is JK's elegant solution to contextual forms using a ligature glyph...
/***
	(absLam absLamFin)=L  absAlef=A  > 
		(absLamAlef absLamAlefFin):(L A) {component {lam.ref = @L; alef.ref=@A } } gAlefPlaceholder
		/ _  MARKS  _  MARKS ^;
***/
	// ...but we're using two separate glyphs, because of all the combinations.
	cLamIso cAlefIso  >  cLamIniBeforeAlef {alefAttached = false}  cAlefFinAfterLamIni  / _ MARKS ^ _ ;
	cLamFin cAlefIso  >  cLamMedBeforeAlef {alefAttached = false}  cAlefFinAfterLamMed  / _ MARKS ^ _ ;

	// All other contextual forms
	
	(cDualLinkIsol cDualLinkFina absTatweel g_zerojoin) (cDualLinkIsol cRightLinkIsol absTatweel g_zerojoin) > 
		(cDualLinkInit cDualLinkMedi absTatweel g_zerojoin) (cDualLinkFina cRightLinkFina absTatweel g_zerojoin)
		/ _  MARKS ^ _ ;

endpass; // 4


pass(5)	// Features, special behaviors

	cLowHamzaBase  absHamzaAbove  >  cLowHamzaComposed:(1 2)  _;
	
	// Features

	if (meemAlt == sindhi)
		cno_sindhi  >  csindhi;
	endif;
	
	if (hehAlt == kurdish)
		cHeh  >  cHehKurdish;
	endif;
	if (hehAlt == sindhi)
		cHeh  >  cHehSindhi;
	endif;
	if (hehAlt == urdu)
		cHeh  >  cHehUrdu;
	endif;

	if (UAlt == filled)
		cU  >  cU_filled;
	endif;

	if (dammaAlt == filled)
		cDamma > cDamma_filled;
	endif;
//	if (dammaAlt == short)
//		cDamma > cDamma_short;
//	endif;

	if (dammatanAlt == sixNine)
		cno_sixNine > csixNine;
	endif;

	if (daggeralefAlt != small)
		absSuperscriptAlef  >  absSuperscriptAlef_large  /  cTakesLargeDaggerAlef  _;
	endif;	

	if (sukunAlt == jasmDown)
		cno_downOpen  >  cdownOpen;
	endif;
	if (sukunAlt == jasmLeft)
		cno_leftOpen  >  cleftOpen;
	endif;

	if (endOfAyah == circle)
		cEndOfAyah  >  cEndOfAyahCircle;
	endif;
	if (endOfAyah == square)
		cEndOfAyah  >  cEndOfAyahSquare;
	endif;
	

	if (easternDigits == sindhi)
		cEasternDigit  >  cEasternDigitSindhi;
	endif;
	if (easternDigits == urdu)
		cEasternDigit  >  cEasternDigitUrdu;
	endif;
	//if (easternDigits == rohingya)
	//	cEasternDigit  >  cEasternDigitRohingya;
	//endif;
	
	if (commaAlt == down)
		cno_downward  >  cdownward;
	endif;
	
	if (jehHack == dotHat)
		cJeh > cJeh_dotHat;
	endif;
	
	if (headOfKhahHack == openLeft)
		absSmallHighDotlessHeadOfKhah > absShortVowelMark;
	endif;
	
	if (!invis)
		// Note that substitution changes the directionality to the defaults for the
		// substituted glyph. :-( So be sure to fix it:
		cInvisible > g_zerospace {directionality = @1.directionality};
	endif; 
	
endpass; // 5

endtable; // sub


table (positioning)

// Must allow for at least cMark1Below and/or cMark2Below to intervene between base and marks above.
// The code below is more general.

pass(1)

	// Lam-alef components:
#define cHasExit  cTakesexitDia
#define cHasEntry cTakesentryDia
	cHasExit=L {alefAttached = true}  cHasEntry=A {attach {to=@L; at=exitS; with=entryS}; insert = true}
		/ ^ _ {alefAttached == false}  MARKS  _;
	

	// Marks 

	// Note: the superscript-alef may have both the _alef and _diaA att pts; the ordering of these
	// rules assumes the alef AP should be used if there are no intervening marks above.
	// Sch rule: cHasAlefAP=B  cMarkSuperscriptAlefs {attach {to=@B; at=alef; with=alef_}; }  / _ ^ MARKSBELOW _ ;
	// Lateef special considerations:  In the 1.x font, only the lam (and variants except for initial)
	// were included in the superscript-alef attachment rule, even though other glyphs have an alef AP. 
	// This may need further research and discussion: do we want the Graphite version to match the OT? 
	// For now I am assuming so. Therefore, instead of:
	//   calefDia {attach {to = @1; at = alefS; with = alefM}} / cTakesalefDia MARKSBELOW _;
	// we'll use:
	calefDia {attach {to = @1; at = alefS; with = alefM}} / 
		( cLamIso cLamIni cLamIniBeforeAlef cLamMed cLamMedBeforeAlef cLamFin) MARKSBELOW _;

	cdiaADia {attach {to = @1; at = diaAS; with = diaAM}} / cTakesdiaADia MARKSBELOW _;
	cdiaBDia {attach {to = @1; at = diaBS; with = diaBM}} / cTakesdiaBDia opt4(cnTakesdiaBDia) _;	

	// Subtending marks
	// NB: at this point digits should be in visual order, right to left,
	// so we attach the left-most (logically first) to the sign, and proceed to the right.
	
	
//	cSignDigit=D4 { attach {to=@D3; at=digitS; with=digitM }; insert = true}
//	cSignDigit=D3 { attach {to=@D2; at=digitS; with=digitM }; insert = true}
//	cSignDigit=D2 { attach {to=@D1; at=digitS; with=digitM }; insert = true}
//	cSignDigit=D1 { attach {to=@S;  at=digitS; with=digitM }; insert = true}
//	cSign4=S;

	cSignDigit=D3 { attach {to=@D2; at=digitS; with=digitM }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitS; with=digitM }; insert = true}
	cSignDigit=D1 { attach {to=@S;  at=digitS; with=digitM }; insert = true}
	cSign3=S;

	cSignDigit=D2 { attach {to=@D1; at=digitS; with=digitM }; insert = true}
	cSignDigit=D1 { attach {to=@S;  at=digitS; with=digitM }; insert = true}
	cSign2=S;

	cSignDigit { attach {to=@S;  at=digitS; with=digitM }; insert = true}
	cSign1=S;

	
	// However, there is a bug in some integrations (e.g., Firefox) 
	// such that the glyps are still in logical order:
	
//	cSign4=S
//	cSignDigit=D1 { attach {to=@S;  at=digitS; with=digitM }; insert = true}
//	cSignDigit=D2 { attach {to=@D1; at=digitS; with=digitM }; insert = true}
//	cSignDigit=D3 { attach {to=@D2; at=digitS; with=digitM }; insert = true}
//	cSignDigit=D4 { attach {to=@D3; at=digitS; with=digitM }; insert = true};
	
	cSign3=S
	cSignDigit=D1 { attach {to=@S;  at=digitS; with=digitM }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitS; with=digitM }; insert = true}
	cSignDigit=D3 { attach {to=@D2; at=digitS; with=digitM }; insert = true};
	

	cSign2=S
	cSignDigit=D1 { attach {to=@S;  at=digitS; with=digitM }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitS; with=digitM }; insert = true};
	

	cSign1=S
	cSignDigit { attach {to=@S;  at=digitS; with=digitM }; insert = true};


endpass; // 1

pass(2)

	// Kerning of reh-like and waw-like
	
	// Loosen from certain narrow initials because of nuktas below
	// NB: not sure if it is an optical illusion or what, but if I
	// kern Reh & Waw the same distance, the Rehs seem to still touch.
	// So I'm giving them an extra 50m
	cKernRehWawLoosen     {advance.x += 200m } / cRehAll MARKS _ ;
	cKernRehWawLoosen     {advance.x += 150m } / cWawAll MARKS _ ;
	cKernRehWawLoosenMore {advance.x += 350m } / cRehAll MARKS _ ;
	cKernRehWawLoosenMore {advance.x += 300m } / cWawAll MARKS _ ;

	// loosen from following alef with mark below it
	cAlefIso {advance.x += 150m} / cRehWawAll MARKS _ MARKS cMarksBelow ;
	// otherwise most can tighten to alef 
	cRehKernAlef {advance.x -= 130m} / (cRehWawTighten cRehWawTightenMore) MARKSBELOW _ ;

	// tighten to following gaf-like unless reh/waw have a mark above
	cKernRehWawGaf {advance.x -= 150m} / cRehWawTightenToGaf MARKSBELOW _ ;

	// tighter against Ain-like initials
	// (for other fonts we don't do this if the Ain has marks Below, but Lateef design is different.)
	// cAinLikeInit                     / (cRehWawTighten cRehWawTightenMore) MARKS _ MARKS cMarksBelow ;
	cAinLikeInit {advance.x -= 150m} / cRehWawTighten     MARKS _ ;
	cAinLikeInit {advance.x -= 150m} / cRehWawTightenMore MARKS _ ;
	
	// loosen from following Ain-like isloates when reh/wah have lower diacritic:
	cAinLikeIsol {advance.x += 200m} / cRehWawAll MARKS cMarksBelow MARKS _ ;

	// otherwise tighten some reh/wah (nothing below) to following Ain-like isolates
	cAinLikeIsol {advance.x -= 200m} / cRehWawNothingBelow MARKSABOVE _ ;

	// loosen from following narrow glyphs with something below
	cNarrowIni {advance.x += 120m} / cRehWawAll MARKS _ MARKS cMarksBelow ;

	// leave certain cases alone:
	cRehKernOther   / (cRehWawTighten cRehWawTightenMore) MARKS _ MARKS cMarksBelow ;
	(cRehKernOther cRehKernOtherMB)  / (absJehFin  absRehHamzaAboveFin absRehSmallTahTwoDots absRehSmallTahTwoDotsFin absZainHatFin) MARKS _ ;

	// otherwise tighten against most things
	(cRehKernOther cRehKernOtherMB) {advance.x -= 130m} / (cRehWawTighten cRehWawTightenMore) MARKSBELOW _ ;



endpass; // 2	



endtable; // pos

endenvironment;
