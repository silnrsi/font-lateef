#**********************************
# This file is part of Lateef font family (http://software.sil.org/lateef/) 
# and is Copyright (c) 2001-2023 SIL International (http://www.sil.org/),
# with Reserved Font Names "Lateef" and "SIL".
#
# This Font Software is licensed under the SIL Open Font License, Version 1.1.
#
# You should have received a copy of the license along with this Font Software.
# If this is not the case, go to (http://scripts.sil.org/OFL) for all the
# details including an FAQ.
#**********************************


#****************************
#****************************
# GPOS (positioning) rules **
#****************************
#****************************

include(../../source/opentype/customKerning.feax); 


#---  mark feature  ---

lookup MarkToBase {
  lookupflag 0;
    pos  base @diaA  mark @_diaA;
    pos  base @diaB  mark @_diaB;
} MarkToBase;

# Override mark positioning in the case of dagger-alef on certain chars:
lookup AlefToBase {
  lookupflag 0;
    pos  base @alef  mark @_alef;
} AlefToBase;

lookup MarkToLig {
  lookupflag 0;
    pos ligature @LamAlefLig            @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
    pos ligature @LamAlefWaslaLig       @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
    pos ligature @LamAlefWavyHAboveLig  @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
    pos ligature @LamAlefWavyHBelowLig  @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
    pos ligature @LamAlefTwoAboveLig    @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
    pos ligature @LamAlefThreeAboveLig  @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
} MarkToLig;


#---  mkmk feature  ---

@MarkFilter_diaA = [@diaA_MarkBase @_diaA];
lookup MarkToMarkAbove {
  lookupflag UseMarkFilteringSet @MarkFilter_diaA;
    pos mark @diaA_MarkBase mark @_diaA;
} MarkToMarkAbove;

@MarkFilter_diaB = [@diaB_MarkBase @_diaB];
lookup MarkToMarkBelow {
  lookupflag UseMarkFilteringSet @MarkFilter_diaB;
    pos mark @diaB_MarkBase mark @_diaB;
} MarkToMarkBelow;

## Lateef only; others have an empty lookup

# Increase vertical separation between maddah and fatha for sequences like:
# alefMaddah + lam-initial + fatha (for all initial lam-like glyphs that have 
# no nukta above) [ABS-2762]
lookup RaiseMadda {
  lookupflag 0;
ifinfo(familyName, "Lateef") {
  pos [alef-ar alef-ar.fina] madda-ar' <0 -40 0 0 >  [lam-ar.init lamThreedotsbelow-ar.init lamBar-ar.init lamDoublebar-ar.init]' fatha-ar' <0 100 0 0>;
}
} RaiseMadda ;


#---  kern feature (cont'd)  ---


#********************
# Subtending mark positioning

lookup SubtendingMarks {
  lookupflag IgnoreMarks ;
    # In Graphite we use mark attachment rules. However, in OpenType positioning digits on 
    # subtending marks has to be done with adjustments rather than attachment since for some 
    # engines the digits will ordered *before* the subtending mark.
    
    # Additionally, the adjustment value records depend on font face (e.g. bold vs regular). Therefore
    # we use feax extentions to calculate the value records based on glyph advancewidths and digit AP coordinates.
    
    # In each "do" template, the first rule is ordered for Uniscribe or HarfBuzz 'latin', the second for HarfBuzz 'arab'

    # Those that take 4 medium digits
    do for m = @c_4 ;
       let y = APy(m, "digitR") - APy("zero.medium", "digitL");
       let w = -ADVx("zero.medium"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
       let x2 = x1 - w; let x3 = x2 - w; let x4 = x3 - w;
    {
        pos $m @DigitsAnyMedium' <$x1 $y $w 0> @DigitsAnyMedium' <$x2 $y $w 0> @DigitsAnyMedium' <$x3 $y $w 0> @DigitsAnyMedium' <$x4 $y $w 0> ;
        pos    @DigitsAnyMedium' <$x4 $y $w 0> @DigitsAnyMedium' <$x3 $y $w 0> @DigitsAnyMedium' <$x2 $y $w 0> @DigitsAnyMedium' <$x1 $y $w 0> $m ;
    }
    
    # Those that take 3 medium digits
    do for m = [ number-ar.3 year-ar.3 pagenumber-ar.3 samvat-ar.3 numbermark-ar.3 poundmarkabove-ar.3 piastremarkabove-ar.3 ] ;
       let y = APy(m, "digitR") - APy("zero.medium", "digitL");
       let w = -ADVx("zero.medium"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
       let x2 = x1 - w; let x3 = x2 - w;
    {
        pos $m @DigitsAnyMedium' <$x1 $y $w 0> @DigitsAnyMedium' <$x2 $y $w 0> @DigitsAnyMedium' <$x3 $y $w 0> ;
        pos    @DigitsAnyMedium' <$x3 $y $w 0> @DigitsAnyMedium' <$x2 $y $w 0> @DigitsAnyMedium' <$x1 $y $w 0> $m ;
    }

    # Those that take 3 small digits
    do for m = [ endofayah-ar.3 endofayah-ar.alt.3 endofayah-ar.altB.3 disputedendofayah-ar.3 ] ;
       let y = APy(m, "digitR") - APy("zero.small", "digitL");
       let w = -ADVx("zero.small"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
       let x2 = x1 - w; let x3 = x2 - w;
    {
        pos $m @DigitsAnySmall' <$x1 $y $w 0> @DigitsAnySmall' <$x2 $y $w 0> @DigitsAnySmall' <$x3 $y $w 0> ;
        pos    @DigitsAnySmall' <$x3 $y $w 0> @DigitsAnySmall' <$x2 $y $w 0> @DigitsAnySmall' <$x1 $y $w 0> $m ;
    }
    
    # Those that take 2 small digits
    do for m = [ disputedendofayah-ar.2 ] ;
       let y = APy(m, "digitR") - APy("zero.small", "digitL");
       let w = -ADVx("zero.small"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
       let x2 = x1 - w; 
    {
        pos $m  @DigitsAnySmall' <$x1 $y $w 0>  @DigitsAnySmall' <$x2 $y $w 0> ;
        pos     @DigitsAnySmall' <$x2 $y $w 0>  @DigitsAnySmall' <$x1 $y $w 0>  $m ;
    }

    # Those that take 2 medium digits
    do for m = @c_2 ;
       let y = APy(m, "digitR") - APy("zero.medium", "digitL");
       let w = -ADVx("zero.medium"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
       let x2 = x1 - w; 
    {
        pos $m @DigitsAnyMedium' <$x1 $y $w 0> @DigitsAnyMedium' <$x2 $y $w 0> ;
        pos    @DigitsAnyMedium' <$x2 $y $w 0> @DigitsAnyMedium' <$x1 $y $w 0> $m ;
    }
    
    # Those that take 1 small digit
    do for m = [ disputedendofayah-ar ] ;
       let y = APy(m, "digitR") - APy("zero.small", "digitL");
       let w = -ADVx("zero.small"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
    {
        pos $m  @DigitsAnySmall' <$x1 $y $w 0> ;
        pos     @DigitsAnySmall' <$x1 $y $w 0>  $m ;
    }

    # Those that take 1 medium digit
    do for m = @cno_2 ;
       let y = APy(m, "digitR") - APy("zero.medium", "digitL");
       let w = -ADVx("zero.medium"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
    {
        pos $m @DigitsAnyMedium' <$x1 $y $w 0> ;
        pos    @DigitsAnyMedium' <$x1 $y $w 0> $m ;
    }
    
} SubtendingMarks;


include(../../source/opentype/customShifting.feax);

# Lateef only; others have an empty lookup

lookup KernPairs {
  lookupflag IgnoreMarks;
ifinfo(familyName, "Lateef") {
    kernpairs;
}
} KernPairs;


#**********************************
#  FEATURES
#**********************************

#--- Positioning ---

# Would love to be able to do subtending marks as either cursive connection or mark attachment
# Cursive connection doesn't work because the width of the resultant cluster needs to be exactly the
# same as the subtending mark and unrelated to the widths of the digits.
# In Firefox at least, mark attachment works for 06DD (end of Ayah) and latin digits, but no other 
# marks or digits (the digits get reverse ordered by the attachment process).
# So we're back to using kerning


feature kern {  # Kerning
    # Same behavior for latin & arabic:
        lookup SubtendingMarks;
        lookup KernPairs;       # Lateef

# Scheherazade lookups:
do let f = info("familyName");
   if f.find("Scheherazade") != -1 and opt("nokern") != "yes"; {
   # start of kerning positioning
        lookup RehWawKerning1;  # a separate lookup to handle chains
        lookup RehWawKerning;
        lookup LamAlefKerning;
        lookup MiscKerning;
        lookup MiscKerningWDiacs;
        lookup ToothKashidaKerningIM;
        lookup ToothKashidaKerningMM;
        lookup ToothKashidaKerningIMF;
        lookup MiscKashidaKerning;
        # after mark attachment:
        lookup DiacShifting;
}   # SchNew and not nokern

# Lateef lookups:
do let f = info("familyName");
   if f.find("Lateef") != -1; {
        lookup OldStyleKerning;
}   # Lateef

} kern ;

feature mark {  # Mark to base Positioning
    # Same for latin & arabic:
        lookup MarkToBase;
        lookup AlefToBase;
        lookup RaiseMadda;    # Lateef
    script arab;  # Arabic
    	lookup MarkToLig;
##        lookup AlefMark2BelowAfterLam;
      # Force other languages to include Arabic script lookups
      language KIR  ;
      language KUR  ;
      language RHG  ;
      language SND  ;
      language URD  ;
      language WLF  ;
} mark ;

feature mkmk {  # Mark to mark Positioning
    # Same for latin & arabic:
        lookup MarkToMarkAbove;
        lookup MarkToMarkBelow;
} mkmk ;
